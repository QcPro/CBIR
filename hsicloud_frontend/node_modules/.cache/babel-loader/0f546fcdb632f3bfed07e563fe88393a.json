{"remainingRequest":"E:\\CBIR-Project\\CBIR-master\\hsicloud_frontend\\node_modules\\babel-loader\\lib\\index.js!E:\\CBIR-Project\\CBIR-master\\hsicloud_frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\CBIR-Project\\CBIR-master\\hsicloud_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\CBIR-Project\\CBIR-master\\hsicloud_frontend\\src\\components\\ImageCropper\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\CBIR-Project\\CBIR-master\\hsicloud_frontend\\src\\components\\ImageCropper\\index.vue","mtime":1604049459000},{"path":"E:\\CBIR-Project\\CBIR-master\\hsicloud_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\CBIR-Project\\CBIR-master\\hsicloud_frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\CBIR-Project\\CBIR-master\\hsicloud_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\CBIR-Project\\CBIR-master\\hsicloud_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}